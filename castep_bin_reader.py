"""
Reader module for CASTEP pdos_bin

Written based on the example `pdos_bin.f90` file in open-source OptaDos code
"""
import numpy as np
from scipy.io import FortranFile


def read_pdos_bin(filename, endian='big'):
    """
    Read the pdos_bin file generated by CASTEP Spectral task.

    :returns: A dictionary of the data that have been read.
      the weights of each orbital in stored in the 'pdos_weights' array
      with dimension (n_orbital, n_max_eign, n_kpoints, n_spin)
    """
    esymbol = '>' if endian.upper() == 'BIG' else '>'
    dint = np.dtype(esymbol + 'i4')
    ddouble = np.dtype(esymbol + 'f8')
    dch80 = np.dtype(esymbol + 'a80')
    diarray = lambda x: '{}({},)i4'.format(esymbol, x)
    ddarray = lambda x: '{}({},)f8'.format(esymbol, x)

    with FortranFile(filename, header_dtype=np.dtype('>u4')) as fhandle:
        fversion = fhandle.read_record(ddouble)[0]
        fheader = fhandle.read_record(dch80)[0].decode()
        num_kpoints = fhandle.read_record(dint)[0]
        num_spins = fhandle.read_record(dint)[0]
        num_popn_orb = fhandle.read_record(dint)[0]
        max_eignenv = fhandle.read_record(dint)[0]

        # Now we start to read more data
        species = fhandle.read_record(diarray(num_popn_orb))
        ion = fhandle.read_record(diarray(num_popn_orb))
        am_channel = fhandle.read_record(diarray(num_popn_orb))

        # Now we initialize the storage space for the weights
        pdos_weights = np.zeros(
            (num_popn_orb, max_eignenv, num_kpoints, num_spins),
            dtype=np.float)

        kpoint_positions = np.zeros((num_kpoints, 3), dtype=np.float)
        num_eigenvalues = np.zeros(num_spins, dtype=np.int)
        # Now we start to read lots of read numbers
        for nk in range(num_kpoints):
            _, kpoint_positions[nk, :] = fhandle.read_record('>i4', '>(3,)f8')
            for ns in range(num_spins):
                _ = fhandle.read_record(dint)
                num_eigenvalues[ns] = fhandle.read_record(dint)
                for nb in range(num_eigenvalues[ns]):
                    pdos_weights[:, nb, nk, ns] = fhandle.read_record(
                        '>({},)f8'.format(num_popn_orb))

    output = {
        'fversion': fversion,
        'fheader': fheader,
        'num_kpoints': num_kpoints,
        'num_spins': num_spins,
        'num_popn_orb': num_popn_orb,
        'max_eigenenv': max_eignenv,
        'species': species,
        'ion': ion,
        'am_channel': am_channel,
        'pdos_weights': pdos_weights,
        'kpoints_positions': kpoint_positions,
        'num_eigenvalues': num_eigenvalues,
        'pdos_weights': pdos_weights,
    }
    return output
